/* The following code was generated by JFlex 1.4.3 on 22/11/24 16:18 */

package analizadorsintactcarrito;
import static analizadorsintactcarrito.TokensCarrito.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/11/24 16:18 from the specification file
 * <tt>C:/Users/lmeji/OneDrive/Documentos/NetBeansProjects/AnalizadorSintactCarrito/src/analizadorsintactcarrito/entradaCarrito.jflex</tt>
 */
class LexerCarrito {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\54\1\56\2\0\1\54\22\0\1\54\1\0\1\67\5\0"+
    "\1\73\1\74\2\0\1\72\1\66\1\70\1\55\12\2\1\76\1\75"+
    "\1\57\4\0\1\45\1\35\1\30\1\65\1\60\1\32\1\1\1\27"+
    "\1\61\1\46\1\41\1\52\1\36\1\33\1\64\1\51\1\1\1\63"+
    "\1\47\1\25\1\1\1\42\1\37\3\1\4\0\1\1\1\0\1\6"+
    "\1\50\1\40\1\14\1\13\1\62\1\20\1\31\1\16\1\5\1\43"+
    "\1\11\1\15\1\17\1\4\1\21\1\23\1\3\1\34\1\22\1\10"+
    "\1\12\1\44\1\53\1\26\1\7\65\0\1\71\100\0\1\24\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\34\2\1\4\1\1\1\5"+
    "\1\2\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\0\1\15\1\16\60\2\1\17\1\2\1\20\1\0"+
    "\1\21\1\22\16\2\1\23\26\2\1\24\13\2\1\25"+
    "\1\26\16\2\1\27\53\2\1\30\43\2\1\31\3\2"+
    "\1\0\17\2\1\32\4\2\1\33\1\34\1\35\4\2"+
    "\1\31\4\2\1\36\62\2\1\37\15\2\1\40\1\41"+
    "\5\2\1\42\3\2\1\43\26\2\1\44\1\45\2\2"+
    "\1\46\1\2\1\47\1\2\1\50\1\2\1\51\1\2"+
    "\1\52\2\2\1\53\1\54\2\2\1\55\1\56\12\2"+
    "\1\57\1\2\1\60\3\2\1\61\3\2\1\62\3\2"+
    "\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1"+
    "\0\u07e0\0\u081f\0\77\0\u085e\0\u089d\0\u08dc\0\77\0\77"+
    "\0\77\0\77\0\u091b\0\u095a\0\u0999\0\77\0\u09d8\0\u0a17"+
    "\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff"+
    "\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7"+
    "\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef"+
    "\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7"+
    "\0\77\0\u1626\0\77\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761"+
    "\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959"+
    "\0\u1998\0\u19d7\0\176\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12"+
    "\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02"+
    "\0\u1f41\0\176\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb"+
    "\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\77\0\176\0\u2235"+
    "\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d"+
    "\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\176\0\u25a7\0\u25e6"+
    "\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de"+
    "\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6"+
    "\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce"+
    "\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6"+
    "\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe"+
    "\0\u2ffd\0\176\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177"+
    "\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f"+
    "\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528\0\u3567"+
    "\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f"+
    "\0\u379e\0\u37dd\0\u381c\0\u385b\0\u389a\0\176\0\u38d9\0\u3918"+
    "\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10"+
    "\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08"+
    "\0\u3d47\0\176\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\176\0\176"+
    "\0\176\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\77\0\u3f7e\0\u3fbd"+
    "\0\u3ffc\0\u403b\0\176\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u4176"+
    "\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e"+
    "\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527\0\u4566"+
    "\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e"+
    "\0\u479d\0\u47dc\0\u481b\0\u485a\0\u4899\0\u48d8\0\u4917\0\u4956"+
    "\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e"+
    "\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89\0\176\0\u4cc8\0\u4d07"+
    "\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u4e42\0\u4e81\0\u4ec0\0\u4eff"+
    "\0\u4f3e\0\u4f7d\0\u4fbc\0\176\0\176\0\u4ffb\0\u503a\0\u5079"+
    "\0\u50b8\0\u50f7\0\176\0\u5136\0\u5175\0\u51b4\0\176\0\u51f3"+
    "\0\u5232\0\u5271\0\u52b0\0\u52ef\0\u532e\0\u536d\0\u53ac\0\u53eb"+
    "\0\u542a\0\u5469\0\u54a8\0\u54e7\0\u5526\0\u5565\0\u55a4\0\u55e3"+
    "\0\u5622\0\u5661\0\u56a0\0\u56df\0\u571e\0\176\0\176\0\u575d"+
    "\0\u579c\0\176\0\u57db\0\176\0\u581a\0\176\0\u5859\0\176"+
    "\0\u5898\0\176\0\u58d7\0\u5916\0\176\0\176\0\u5955\0\u5994"+
    "\0\176\0\176\0\u59d3\0\u5a12\0\u5a51\0\u5a90\0\u5acf\0\u5b0e"+
    "\0\u5b4d\0\u5b8c\0\u5bcb\0\u5c0a\0\176\0\u5c49\0\176\0\u5c88"+
    "\0\u5cc7\0\u5d06\0\176\0\u5d45\0\u5d84\0\u5dc3\0\176\0\u5e02"+
    "\0\u5e41\0\u5e80\0\176\0\176";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\3"+
    "\1\10\1\3\1\11\1\12\1\13\1\14\1\3\1\15"+
    "\1\16\1\17\1\20\1\3\1\2\1\21\1\3\1\22"+
    "\1\23\1\3\1\24\1\25\1\26\1\27\1\30\1\3"+
    "\1\31\1\32\1\33\2\3\1\34\1\35\1\36\1\3"+
    "\1\37\1\40\1\3\1\41\1\42\1\41\1\43\2\3"+
    "\1\44\3\3\1\45\1\46\2\2\1\47\1\50\1\51"+
    "\1\52\1\53\100\0\23\3\1\0\27\3\4\0\6\3"+
    "\1\54\12\0\1\4\65\0\1\55\1\56\6\0\3\3"+
    "\1\57\6\3\1\60\10\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\2\3\1\61\20\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\4\3\1\62\1\3\1\63\2\3"+
    "\1\64\2\3\1\65\3\3\1\66\2\3\1\0\13\3"+
    "\1\67\13\3\4\0\6\3\1\54\11\0\23\3\1\0"+
    "\7\3\1\70\17\3\4\0\6\3\1\54\11\0\12\3"+
    "\1\71\10\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\16\3\1\72\4\3\1\0\7\3\1\73\17\3\4\0"+
    "\6\3\1\54\11\0\12\3\1\74\2\3\1\75\5\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\5\3\1\76"+
    "\4\3\1\77\10\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\12\3\1\100\2\3\1\101\5\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\2\3\1\102\12\3\1\103"+
    "\5\3\1\0\27\3\4\0\6\3\1\54\11\0\3\3"+
    "\1\104\1\3\1\105\2\3\1\106\1\3\1\107\10\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\2\3\1\110"+
    "\20\3\1\0\27\3\4\0\6\3\1\54\11\0\3\3"+
    "\1\111\6\3\1\112\10\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\3\3\1\113\17\3\1\0\1\3\1\114"+
    "\25\3\4\0\6\3\1\54\11\0\23\3\1\0\4\3"+
    "\1\115\22\3\4\0\6\3\1\54\11\0\3\3\1\116"+
    "\6\3\1\117\10\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\15\3\1\120\5\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\12\3\1\121\2\3\1\122\5\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\23\3\1\0\11\3"+
    "\1\123\15\3\4\0\6\3\1\54\11\0\5\3\1\124"+
    "\4\3\1\125\10\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\5\3\1\126\15\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\15\3\1\127\5\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\3\3\1\130\17\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\7\3\1\131\13\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\12\3\1\132\10\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\7\3\1\133"+
    "\13\3\1\0\27\3\4\0\6\3\1\54\11\0\3\3"+
    "\1\134\17\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\5\3\1\135\4\3\1\136\10\3\1\0\27\3\4\0"+
    "\6\3\1\54\64\0\1\41\1\0\1\41\75\0\1\137"+
    "\22\0\15\3\1\140\5\3\1\0\27\3\4\0\6\3"+
    "\1\54\106\0\1\141\1\0\1\142\1\0\21\142\1\0"+
    "\27\142\4\0\6\142\77\0\1\143\11\0\1\144\1\0"+
    "\21\144\1\0\27\144\4\0\6\144\13\0\1\55\65\0"+
    "\1\55\7\0\4\3\1\145\16\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\21\3\1\146\1\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\15\3\1\147\5\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\7\3\1\150\13\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\7\3\1\151"+
    "\13\3\1\0\27\3\4\0\6\3\1\54\11\0\5\3"+
    "\1\152\15\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\5\3\1\153\15\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\5\3\1\154\15\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\21\3\1\155\1\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\5\3\1\156\15\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\2\3\1\157\20\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\23\3\1\0\13\3"+
    "\1\160\13\3\4\0\6\3\1\54\11\0\20\3\1\161"+
    "\2\3\1\0\27\3\4\0\6\3\1\54\11\0\21\3"+
    "\1\162\1\3\1\0\27\3\4\0\2\3\1\163\3\3"+
    "\1\54\11\0\5\3\1\164\15\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\15\3\1\165\5\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\13\3\1\166\7\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\17\3\1\167\3\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\11\3\1\170"+
    "\11\3\1\0\27\3\4\0\6\3\1\54\11\0\5\3"+
    "\1\171\15\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\2\3\1\172\20\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\23\3\1\0\7\3\1\173\17\3\4\0\6\3"+
    "\1\54\11\0\21\3\1\174\1\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\5\3\1\175\15\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\22\3\1\176\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\5\3\1\177\15\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\23\3\1\0\1\3"+
    "\1\200\25\3\4\0\6\3\1\54\11\0\23\3\1\0"+
    "\7\3\1\201\17\3\4\0\6\3\1\54\11\0\16\3"+
    "\1\202\4\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\7\3\1\203\13\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\12\3\1\204\10\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\2\3\1\205\20\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\2\3\1\206\20\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\23\3\1\0\7\3\1\207"+
    "\17\3\4\0\6\3\1\54\11\0\21\3\1\210\1\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\23\3\1\0"+
    "\24\3\1\211\2\3\4\0\6\3\1\54\11\0\23\3"+
    "\1\0\12\3\1\212\14\3\4\0\6\3\1\54\11\0"+
    "\6\3\1\202\14\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\2\3\1\213\20\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\2\3\1\214\11\3\1\215\6\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\5\3\1\212\15\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\10\3\1\216"+
    "\12\3\1\0\27\3\4\0\6\3\1\54\11\0\13\3"+
    "\1\217\7\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\12\3\1\220\10\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\23\3\1\0\23\3\1\221\3\3\4\0\6\3"+
    "\1\54\11\0\2\3\1\222\20\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\14\3\1\223\6\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\23\3\1\0\26\3\1\224"+
    "\4\0\6\3\1\54\10\0\56\137\1\0\20\137\1\0"+
    "\16\3\1\225\4\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\23\142\1\0\27\142\4\0\6\142\1\0\1\226"+
    "\10\0\23\144\1\0\27\144\4\0\6\144\12\0\3\3"+
    "\1\227\17\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\2\3\1\230\20\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\12\3\1\231\10\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\23\3\1\0\7\3\1\232\17\3\4\0"+
    "\6\3\1\54\11\0\10\3\1\227\12\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\16\3\1\233\4\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\2\3\1\234\20\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\17\3\1\235"+
    "\3\3\1\0\27\3\4\0\6\3\1\54\11\0\15\3"+
    "\1\236\5\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\2\3\1\237\20\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\13\3\1\240\7\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\12\3\1\241\10\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\5\3\1\242\4\3\1\243\10\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\12\3\1\244"+
    "\10\3\1\0\27\3\4\0\6\3\1\54\11\0\17\3"+
    "\1\245\3\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\16\3\1\246\4\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\15\3\1\247\5\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\2\3\1\145\20\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\12\3\1\250\10\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\16\3\1\251\4\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\5\3\1\252\15\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\15\3\1\253"+
    "\5\3\1\0\27\3\4\0\6\3\1\54\11\0\2\3"+
    "\1\254\20\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\21\3\1\255\1\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\7\3\1\256\13\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\6\3\1\257\14\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\3\3\1\260\17\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\10\3\1\127\12\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\13\3\1\127\7\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\16\3\1\261"+
    "\4\3\1\0\27\3\4\0\6\3\1\54\11\0\11\3"+
    "\1\262\11\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\13\3\1\212\7\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\2\3\1\263\20\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\23\3\1\0\7\3\1\264\17\3\4\0"+
    "\6\3\1\54\11\0\23\3\1\0\27\3\4\0\1\265"+
    "\5\3\1\54\11\0\2\3\1\266\20\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\23\3\1\0\13\3\1\267"+
    "\13\3\4\0\6\3\1\54\11\0\2\3\1\270\14\3"+
    "\1\271\3\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\23\3\1\0\23\3\1\272\3\3\4\0\6\3\1\54"+
    "\11\0\11\3\1\273\11\3\1\0\16\3\1\274\10\3"+
    "\4\0\6\3\1\54\11\0\15\3\1\212\5\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\20\3\1\212\2\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\5\3\1\275"+
    "\15\3\1\0\27\3\4\0\6\3\1\54\11\0\23\3"+
    "\1\0\7\3\1\276\17\3\4\0\6\3\1\54\11\0"+
    "\23\3\1\0\23\3\1\277\3\3\4\0\6\3\1\54"+
    "\11\0\7\3\1\300\13\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\23\3\1\0\27\3\4\0\3\3\1\301"+
    "\2\3\1\54\11\0\3\3\1\302\17\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\16\3\1\303\4\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\21\3\1\304\1\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\6\3\1\305"+
    "\14\3\1\0\27\3\4\0\6\3\1\54\11\0\15\3"+
    "\1\306\5\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\5\3\1\307\15\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\11\3\1\310\11\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\23\3\1\0\22\3\1\311\4\3\4\0"+
    "\6\3\1\54\11\0\12\3\1\227\10\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\16\3\1\312\4\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\23\3\1\0\13\3"+
    "\1\313\13\3\4\0\6\3\1\54\11\0\2\3\1\314"+
    "\20\3\1\0\27\3\4\0\6\3\1\54\11\0\16\3"+
    "\1\315\4\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\16\3\1\316\4\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\5\3\1\317\15\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\10\3\1\320\12\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\13\3\1\321\7\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\2\3\1\322\20\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\23\3\1\0\13\3"+
    "\1\323\13\3\4\0\6\3\1\54\11\0\3\3\1\324"+
    "\17\3\1\0\27\3\4\0\6\3\1\54\11\0\12\3"+
    "\1\325\10\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\12\3\1\326\10\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\5\3\1\327\15\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\21\3\1\127\1\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\13\3\1\330\7\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\2\3\1\331\20\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\5\3\1\332\15\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\5\3\1\333"+
    "\15\3\1\0\27\3\4\0\6\3\1\54\11\0\23\3"+
    "\1\0\7\3\1\334\17\3\4\0\6\3\1\54\11\0"+
    "\3\3\1\335\17\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\12\3\1\336\10\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\15\3\1\337\5\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\5\3\1\340\15\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\15\3\1\341\5\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\3\3\1\212\17\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\23\3\1\0"+
    "\7\3\1\342\17\3\4\0\6\3\1\54\11\0\2\3"+
    "\1\343\20\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\23\3\1\0\13\3\1\344\13\3\4\0\6\3\1\54"+
    "\11\0\3\3\1\345\17\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\23\3\1\0\7\3\1\212\17\3\4\0"+
    "\6\3\1\54\11\0\12\3\1\346\10\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\23\3\1\0\13\3\1\347"+
    "\13\3\4\0\6\3\1\54\11\0\21\3\1\350\1\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\5\3\1\351"+
    "\15\3\1\0\27\3\4\0\6\3\1\54\11\0\5\3"+
    "\1\352\15\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\10\3\1\353\12\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\2\3\1\354\20\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\5\3\1\355\15\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\12\3\1\356\10\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\13\3\1\357\7\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\15\3\1\360\5\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\5\3\1\361"+
    "\15\3\1\0\27\3\4\0\6\3\1\54\11\0\12\3"+
    "\1\362\10\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\3\3\1\363\17\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\16\3\1\364\4\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\23\3\1\0\10\3\1\365\16\3\4\0"+
    "\6\3\1\54\11\0\12\3\1\366\10\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\15\3\1\367\5\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\16\3\1\370\4\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\5\3\1\371"+
    "\15\3\1\0\27\3\4\0\6\3\1\54\11\0\23\3"+
    "\1\372\27\3\4\0\6\3\1\54\11\0\2\3\1\373"+
    "\20\3\1\0\27\3\4\0\6\3\1\54\11\0\5\3"+
    "\1\217\15\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\3\3\1\374\17\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\2\3\1\217\20\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\16\3\1\212\4\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\20\3\1\375\2\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\23\3\1\0\26\3\1\376"+
    "\4\0\6\3\1\54\11\0\13\3\1\377\7\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\21\3\1\u0100\1\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\2\3\1\u0101"+
    "\20\3\1\0\27\3\4\0\6\3\1\54\11\0\5\3"+
    "\1\u0102\15\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\23\3\1\0\17\3\1\u0103\7\3\4\0\6\3\1\54"+
    "\11\0\7\3\1\212\13\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\23\3\1\0\4\3\1\u0104\22\3\4\0"+
    "\6\3\1\54\11\0\2\3\1\u0105\20\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\23\3\1\0\13\3\1\u0106"+
    "\13\3\4\0\6\3\1\54\11\0\12\3\1\u0107\10\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\5\3\1\u0108"+
    "\15\3\1\0\27\3\4\0\6\3\1\54\11\0\2\3"+
    "\1\u0109\20\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\2\3\1\u010a\20\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\10\3\1\145\12\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\23\3\1\0\11\3\1\u010b\15\3\4\0"+
    "\6\3\1\54\11\0\2\3\1\u010c\20\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\16\3\1\u010d\4\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\12\3\1\u010e\10\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\3\3\1\u010f"+
    "\17\3\1\0\27\3\4\0\6\3\1\54\11\0\2\3"+
    "\1\u0110\20\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\2\3\1\u0111\20\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\23\3\1\0\7\3\1\u0112\17\3\4\0\6\3"+
    "\1\54\11\0\3\3\1\366\17\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\5\3\1\u0113\15\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\3\3\1\u0114\17\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\23\3\1\0\11\3"+
    "\1\u0115\15\3\4\0\6\3\1\54\11\0\13\3\1\145"+
    "\7\3\1\0\27\3\4\0\6\3\1\54\14\0\1\u0116"+
    "\73\0\23\3\1\0\27\3\4\0\3\3\1\u0117\2\3"+
    "\1\54\11\0\10\3\1\u0118\12\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\5\3\1\u0119\15\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\15\3\1\u011a\5\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\12\3\1\300\10\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\3\3\1\u011b"+
    "\17\3\1\0\27\3\4\0\6\3\1\54\11\0\23\3"+
    "\1\0\10\3\1\u011c\16\3\4\0\6\3\1\54\11\0"+
    "\2\3\1\u011d\20\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\5\3\1\u011e\15\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\12\3\1\212\10\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\17\3\1\u011f\3\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\3\3\1\u0120\17\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\13\3\1\u0121\7\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\23\3\1\0"+
    "\13\3\1\u0122\13\3\4\0\6\3\1\54\11\0\23\3"+
    "\1\0\15\3\1\u0123\4\3\1\u0124\4\3\4\0\4\3"+
    "\1\u0125\1\3\1\54\11\0\3\3\1\u0126\17\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\23\3\1\0\10\3"+
    "\1\u0127\16\3\4\0\6\3\1\54\11\0\23\3\1\0"+
    "\7\3\1\u0128\17\3\4\0\6\3\1\54\11\0\2\3"+
    "\1\u0129\20\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\21\3\1\u012a\1\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\21\3\1\u012b\1\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\16\3\1\u012c\4\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\3\3\1\u012d\17\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\7\3\1\u012e\13\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\12\3\1\u012f\10\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\23\3\1\0"+
    "\13\3\1\u0130\13\3\4\0\6\3\1\54\11\0\14\3"+
    "\1\u0131\6\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\5\3\1\u0132\15\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\23\3\1\0\3\3\1\u0133\2\3\1\u0134\20\3"+
    "\4\0\6\3\1\54\11\0\17\3\1\u0135\3\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\23\3\1\0\4\3"+
    "\1\u0136\22\3\4\0\6\3\1\54\11\0\2\3\1\u0137"+
    "\20\3\1\0\27\3\4\0\6\3\1\54\11\0\12\3"+
    "\1\u0138\10\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\15\3\1\u0139\5\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\12\3\1\u013a\10\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\3\3\1\u013b\17\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\2\3\1\u013c\20\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\21\3\1\u013d\1\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\3\3\1\u013e\17\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\3\3\1\u013f"+
    "\17\3\1\0\27\3\4\0\6\3\1\54\11\0\23\3"+
    "\1\0\11\3\1\u0140\13\3\1\u0141\1\3\4\0\6\3"+
    "\1\54\11\0\15\3\1\u0142\5\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\12\3\1\u0143\10\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\23\3\1\0\27\3\4\0"+
    "\1\3\1\u0144\4\3\1\54\11\0\11\3\1\u0145\11\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\21\3\1\u0146"+
    "\1\3\1\0\27\3\4\0\6\3\1\54\11\0\21\3"+
    "\1\212\1\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\15\3\1\u0147\5\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\15\3\1\u0148\5\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\21\3\1\u0149\1\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\3\3\1\u014a\17\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\3\3\1\u014b\17\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\12\3\1\333\10\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\15\3\1\u014c"+
    "\5\3\1\0\27\3\4\0\6\3\1\54\11\0\2\3"+
    "\1\u014d\20\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\2\3\1\u014e\20\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\3\3\1\u014f\17\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\10\3\1\u0150\12\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\16\3\1\u0151\4\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\15\3\1\u0152\5\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\3\3\1\u0153\17\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\23\3\1\0"+
    "\13\3\1\u0154\13\3\4\0\6\3\1\54\11\0\2\3"+
    "\1\u0155\20\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\3\3\1\u0156\17\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\7\3\1\u0157\13\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\23\3\1\0\13\3\1\u0158\13\3\4\0"+
    "\6\3\1\54\11\0\2\3\1\u0159\20\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\16\3\1\u015a\4\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\15\3\1\u015b\5\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\5\3\1\u015c"+
    "\15\3\1\0\27\3\4\0\6\3\1\54\11\0\3\3"+
    "\1\u015d\17\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\13\3\1\u015e\7\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\12\3\1\u015f\10\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\10\3\1\u0160\12\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\14\3\1\u0161\6\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\16\3\1\217\4\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\15\3\1\u0162\5\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\16\3\1\u0163"+
    "\4\3\1\0\27\3\4\0\6\3\1\54\11\0\3\3"+
    "\1\u0164\17\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\15\3\1\u0165\5\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\12\3\1\u0166\10\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\2\3\1\u0167\20\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\15\3\1\u0168\5\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\23\3\1\0\24\3\1\u0169"+
    "\2\3\4\0\5\3\1\u016a\1\54\11\0\21\3\1\u016b"+
    "\1\3\1\0\27\3\4\0\6\3\1\54\11\0\23\3"+
    "\1\0\13\3\1\u016c\13\3\4\0\6\3\1\54\11\0"+
    "\5\3\1\u016d\15\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\15\3\1\u016e\5\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\15\3\1\u016f\5\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\14\3\1\u0170\6\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\5\3\1\u0171\15\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\2\3\1\u0172\20\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\3\3\1\u0173"+
    "\17\3\1\0\27\3\4\0\6\3\1\54\11\0\23\3"+
    "\1\0\23\3\1\u0174\3\3\4\0\6\3\1\54\11\0"+
    "\13\3\1\u0175\7\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\23\3\1\0\13\3\1\u0176\13\3\4\0\6\3"+
    "\1\54\11\0\13\3\1\u0177\7\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\16\3\1\u0178\4\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\16\3\1\u0179\4\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\2\3\1\u017a\20\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\15\3\1\u017b"+
    "\5\3\1\0\27\3\4\0\6\3\1\54\11\0\3\3"+
    "\1\u017c\17\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\12\3\1\u017d\10\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\2\3\1\u017e\20\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\5\3\1\u017f\15\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\23\3\1\0\13\3\1\u0180\13\3"+
    "\4\0\6\3\1\54\11\0\15\3\1\u0181\5\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\13\3\1\u0182\7\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\15\3\1\u0183"+
    "\5\3\1\0\27\3\4\0\6\3\1\54\11\0\2\3"+
    "\1\u0184\20\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\2\3\1\u0185\20\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\3\3\1\u0186\17\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\15\3\1\u0187\5\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\3\3\1\u0188\17\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\21\3\1\u0189\1\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\5\3\1\u018a\15\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\3\3\1\u018b"+
    "\17\3\1\0\27\3\4\0\6\3\1\54\11\0\23\3"+
    "\1\0\7\3\1\u018c\17\3\4\0\6\3\1\54\11\0"+
    "\2\3\1\u018d\20\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\23\3\1\0\7\3\1\u018e\17\3\4\0\6\3"+
    "\1\54\11\0\15\3\1\u018f\5\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\12\3\1\u0190\10\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\5\3\1\u0191\15\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\12\3\1\u0192\10\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\13\3\1\u0193"+
    "\7\3\1\0\27\3\4\0\6\3\1\54\11\0\5\3"+
    "\1\u0194\15\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\23\3\1\0\26\3\1\u0195\4\0\6\3\1\54\11\0"+
    "\21\3\1\u0196\1\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\5\3\1\u0197\15\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\16\3\1\u0198\4\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\5\3\1\u0199\15\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\23\3\1\0\13\3\1\u019a"+
    "\13\3\4\0\6\3\1\54\11\0\15\3\1\u019b\5\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\5\3\1\u019c"+
    "\15\3\1\0\27\3\4\0\6\3\1\54\11\0\10\3"+
    "\1\u019d\12\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\21\3\1\u019e\1\3\1\0\27\3\4\0\6\3\1\54"+
    "\11\0\13\3\1\u019f\7\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\15\3\1\u01a0\5\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\14\3\1\u01a1\6\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\16\3\1\u01a2\4\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\3\3\1\u01a3\17\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\3\3\1\u01a4"+
    "\17\3\1\0\27\3\4\0\6\3\1\54\11\0\15\3"+
    "\1\u01a5\5\3\1\0\27\3\4\0\6\3\1\54\11\0"+
    "\23\3\1\0\13\3\1\u01a6\13\3\4\0\6\3\1\54"+
    "\11\0\16\3\1\u01a7\4\3\1\0\27\3\4\0\6\3"+
    "\1\54\11\0\13\3\1\u01a8\7\3\1\0\27\3\4\0"+
    "\6\3\1\54\11\0\15\3\1\u01a9\5\3\1\0\27\3"+
    "\4\0\6\3\1\54\11\0\5\3\1\u01aa\15\3\1\0"+
    "\27\3\4\0\6\3\1\54\11\0\5\3\1\u01ab\15\3"+
    "\1\0\27\3\4\0\6\3\1\54\11\0\13\3\1\u01ac"+
    "\7\3\1\0\27\3\4\0\6\3\1\54\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24255];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\40\1\1\11\3\1\4\11\1\1\1\0"+
    "\1\1\1\11\62\1\1\11\1\0\1\11\62\1\1\11"+
    "\143\1\1\0\33\1\1\11\226\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCarrito(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCarrito(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TokensCarrito yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { /* Ignorar comentarios de una línea */
          }
        case 53: break;
        case 13: 
          { lexeme = yytext(); return N_DECIMAL;
          }
        case 54: break;
        case 24: 
          { lexeme = yytext(); return GIRAR;
          }
        case 55: break;
        case 21: 
          { lexeme = yytext(); return IDENTIFICADOR;
          }
        case 56: break;
        case 10: 
          { lexeme = yytext(); return PARENTESIS_CERRADO;
          }
        case 57: break;
        case 49: 
          { lexeme = yytext(); return PATRON_MOVIMIENTO;
          }
        case 58: break;
        case 4: 
          { /* Ignorar espacios y saltos de línea */
          }
        case 59: break;
        case 27: 
          { lexeme = yytext(); return ESPACIO;
          }
        case 60: break;
        case 52: 
          { lexeme = yytext(); return USAR_SENSOR_PROXIMIDAD;
          }
        case 61: break;
        case 28: 
          { lexeme = yytext(); return ESPERAR;
          }
        case 62: break;
        case 19: 
          { lexeme = yytext(); return DEF;
          }
        case 63: break;
        case 45: 
          { lexeme = yytext(); return CARGAR_BATERIA;
          }
        case 64: break;
        case 7: 
          { lexeme = yytext(); return COMILLA;
          }
        case 65: break;
        case 30: 
          { lexeme = yytext(); return CARRO;
          }
        case 66: break;
        case 2: 
          { lexeme = yytext(); return NAME;
          }
        case 67: break;
        case 18: 
          { lexeme = yytext(); return PLACA;
          }
        case 68: break;
        case 33: 
          { lexeme = yytext(); return SET_ESPACIO;
          }
        case 69: break;
        case 44: 
          { lexeme = yytext(); return ENCENDER_LUCES;
          }
        case 70: break;
        case 8: 
          { lexeme = yytext(); return COMA;
          }
        case 71: break;
        case 22: 
          { lexeme = yytext(); return COLOR;
          }
        case 72: break;
        case 39: 
          { lexeme = yytext(); return CAMBIAR_COLOR;
          }
        case 73: break;
        case 16: 
          { lexeme = yytext(); return D_PG2;
          }
        case 74: break;
        case 38: 
          { lexeme = yytext(); return SI_PROXIMIDAD;
          }
        case 75: break;
        case 35: 
          { lexeme = yytext(); return APAGAR_MOTOR;
          }
        case 76: break;
        case 3: 
          { lexeme = yytext(); return NUMERO;
          }
        case 77: break;
        case 37: 
          { lexeme = yytext(); return NIVEL_BATERIA;
          }
        case 78: break;
        case 12: 
          { lexeme = yytext(); return D_PUNTOS;
          }
        case 79: break;
        case 43: 
          { lexeme = yytext(); return ENCENDER_MOTOR;
          }
        case 80: break;
        case 48: 
          { lexeme = yytext(); return AJUSTAR_VELOCIDAD;
          }
        case 81: break;
        case 5: 
          { lexeme = yytext(); return MAYOR;
          }
        case 82: break;
        case 11: 
          { lexeme = yytext(); return P_COMA;
          }
        case 83: break;
        case 14: 
          { lexeme = yytext(); return NUMERO_G;
          }
        case 84: break;
        case 20: 
          { lexeme = yytext(); return MARCA;
          }
        case 85: break;
        case 40: 
          { lexeme = yytext(); return FIN_RECORRIDO;
          }
        case 86: break;
        case 17: 
          { lexeme = yytext(); return D_PG1;
          }
        case 87: break;
        case 6: 
          { lexeme = yytext(); return GUION;
          }
        case 88: break;
        case 50: 
          { lexeme = yytext(); return AJUSTAR_ORIENTACION;
          }
        case 89: break;
        case 32: 
          { lexeme = yytext(); return TRAZAR_RUTA;
          }
        case 90: break;
        case 25: 
          { lexeme = yytext(); return TAMAÑO;
          }
        case 91: break;
        case 31: 
          { lexeme = yytext(); return RETROCEDER;
          }
        case 92: break;
        case 34: 
          { lexeme = yytext(); return ORIENTACION;
          }
        case 93: break;
        case 41: 
          { lexeme = yytext(); return AJUSTAR_SONIDO;
          }
        case 94: break;
        case 47: 
          { lexeme = yytext(); return POSICION_INICIAL;
          }
        case 95: break;
        case 9: 
          { lexeme = yytext(); return PARENTESIS_ABIERTO;
          }
        case 96: break;
        case 26: 
          { lexeme = yytext(); return AVANZAR;
          }
        case 97: break;
        case 1: 
          { lexeme = yytext(); return ERROR;
          }
        case 98: break;
        case 51: 
          { lexeme = yytext(); return USAR_SENSOR_DISTANCIA;
          }
        case 99: break;
        case 42: 
          { lexeme = yytext(); return ACTIVAR_BOCINA;
          }
        case 100: break;
        case 36: 
          { lexeme = yytext(); return DIAGNOSTICAR;
          }
        case 101: break;
        case 23: 
          { lexeme = yytext(); return MAIN;
          }
        case 102: break;
        case 46: 
          { lexeme = yytext(); return CAMBIAR_NOMBRE;
          }
        case 103: break;
        case 29: 
          { lexeme = yytext(); return DETENER;
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
