
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 22 16:30:33 PET 2024
//----------------------------------------------------

package analizadorsintactcarrito;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 22 16:30:33 PET 2024
  */
public class Syntactic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\005\000\002\003\005\000\002\005\005" +
    "\000\002\004\016\000\002\004\006\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\010\000\002" +
    "\004\006\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\004\005\004\001\002\000\004\006\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\056\010\001\002\000\004\057\011\001\002\000" +
    "\004\053\012\001\002\000\030\004\013\007\024\010\023" +
    "\011\026\012\014\014\016\015\020\022\017\023\027\026" +
    "\015\040\021\001\002\000\004\056\103\001\002\000\004" +
    "\056\076\001\002\000\004\056\073\001\002\000\004\056" +
    "\071\001\002\000\004\056\067\001\002\000\004\056\062" +
    "\001\002\000\004\056\060\001\002\000\034\004\013\007" +
    "\024\010\023\011\026\012\014\014\016\015\020\022\017" +
    "\023\027\026\015\040\021\046\053\055\052\001\002\000" +
    "\004\056\045\001\002\000\004\056\040\001\002\000\004" +
    "\060\037\001\002\000\004\056\032\001\002\000\004\056" +
    "\030\001\002\000\004\057\031\001\002\000\004\060\ufff3" +
    "\001\002\000\004\050\033\001\002\000\004\062\034\001" +
    "\002\000\004\050\035\001\002\000\004\057\036\001\002" +
    "\000\004\060\ufff8\001\002\000\034\004\uffff\007\uffff\010" +
    "\uffff\011\uffff\012\uffff\014\uffff\015\uffff\022\uffff\023\uffff" +
    "\026\uffff\040\uffff\046\uffff\055\uffff\001\002\000\004\050" +
    "\041\001\002\000\004\062\042\001\002\000\004\050\043" +
    "\001\002\000\004\057\044\001\002\000\004\060\ufff9\001" +
    "\002\000\004\045\046\001\002\000\004\057\047\001\002" +
    "\000\004\060\ufffa\001\002\000\004\060\057\001\002\000" +
    "\004\060\056\001\002\000\004\002\000\001\002\000\004" +
    "\054\054\001\002\000\030\004\013\007\024\010\023\011" +
    "\026\012\014\014\016\015\020\022\017\023\027\026\015" +
    "\040\021\001\002\000\004\060\ufffc\001\002\000\034\004" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd\015\ufffd" +
    "\022\ufffd\023\ufffd\026\ufffd\040\ufffd\046\ufffd\055\ufffd\001" +
    "\002\000\034\004\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\014\ufffe\015\ufffe\022\ufffe\023\ufffe\026\ufffe\040\ufffe\046" +
    "\ufffe\055\ufffe\001\002\000\004\057\061\001\002\000\004" +
    "\060\ufff1\001\002\000\004\050\063\001\002\000\004\062" +
    "\064\001\002\000\004\050\065\001\002\000\004\057\066" +
    "\001\002\000\004\060\ufff6\001\002\000\004\057\070\001" +
    "\002\000\004\060\ufff4\001\002\000\004\057\072\001\002" +
    "\000\004\060\ufff2\001\002\000\004\051\074\001\002\000" +
    "\004\057\075\001\002\000\004\060\ufff5\001\002\000\004" +
    "\050\077\001\002\000\004\062\100\001\002\000\004\050" +
    "\101\001\002\000\004\057\102\001\002\000\004\060\ufff7" +
    "\001\002\000\004\047\104\001\002\000\004\062\105\001" +
    "\002\000\004\043\106\001\002\000\004\062\107\001\002" +
    "\000\004\052\110\001\002\000\004\062\111\001\002\000" +
    "\004\042\112\001\002\000\004\044\113\001\002\000\004" +
    "\042\114\001\002\000\004\057\115\001\002\000\004\060" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\021\004\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\050\005\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMANDO1 ::= ESPERAR PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("COMANDO1",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMANDO1 ::= DETENER PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("COMANDO1",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMANDO1 ::= APAGAR_MOTOR PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("COMANDO1",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMANDO1 ::= ENCENDER_MOTOR PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("COMANDO1",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COMANDO1 ::= ORIENTACION PARENTESIS_ABIERTO NUMERO_G PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("COMANDO1",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COMANDO1 ::= RETROCEDER PARENTESIS_ABIERTO N_DECIMAL COMA N_DECIMAL PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("COMANDO1",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMANDO1 ::= AVANZAR PARENTESIS_ABIERTO N_DECIMAL COMA N_DECIMAL PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("COMANDO1",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMANDO1 ::= POSICION_INICIAL PARENTESIS_ABIERTO N_DECIMAL COMA N_DECIMAL PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("COMANDO1",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COMANDO1 ::= ESPACIO PARENTESIS_ABIERTO N_DECIMAL COMA N_DECIMAL PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("COMANDO1",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMANDO1 ::= SET_ESPACIO PARENTESIS_ABIERTO NUMERO PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("COMANDO1",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COMANDO1 ::= CARRO PARENTESIS_ABIERTO IDENTIFICADOR COMA COLOR COMA MARCA COMA COMILLA PLACA COMILLA PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("COMANDO1",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-11)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COMANDO3 ::= NAME MAYOR COMANDO1 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("COMANDO3",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA COMANDO1 P_COMA 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA COMANDO3 P_COMA 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= COMANDO1 P_COMA 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DEF MAIN PARENTESIS_ABIERTO PARENTESIS_CERRADO D_PG1 SENTENCIA D_PG2 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

