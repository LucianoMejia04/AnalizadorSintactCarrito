/* The following code was generated by JFlex 1.4.3 on 22/11/24 16:30 */

package analizadorsintactcarrito;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/11/24 16:30 from the specification file
 * <tt>C:/Users/lmeji/OneDrive/Documentos/NetBeansProjects/AnalizadorSintactCarrito/src/analizadorsintactcarrito/entradaCupCarrito.jflex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0,  6,  0,  0,  0,  0,  0, 57, 58,  0,  0, 60, 53, 54,  4, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 56, 59, 45,  0,  0,  0, 
     0, 36, 26, 17, 52, 47, 23,  1, 12, 48, 37, 30, 42, 27, 24, 51, 
    41,  1, 50, 39,  7,  1, 32, 28,  1,  1,  1,  0,  0,  0,  0,  1, 
     0, 11, 40, 29, 14, 19, 46, 35, 18, 16, 49, 33, 22, 44, 13,  8, 
    38,  1, 21, 25, 10, 15, 20, 34, 43,  9, 31,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    55,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\34\2"+
    "\1\6\1\2\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\0\1\15\1\16\1\17\1\0\56\2\1\3\1\20"+
    "\1\21\1\22\1\23\20\2\1\24\14\2\1\25\25\2"+
    "\1\26\40\2\1\27\33\2\1\30\46\2\1\31\5\2"+
    "\1\32\3\2\1\33\1\34\3\2\1\35\65\2\1\36"+
    "\12\2\1\37\1\2\1\40\6\2\1\41\1\2\1\42"+
    "\24\2\1\43\1\44\4\2\1\45\1\2\1\46\3\2"+
    "\1\47\1\50\1\2\1\51\3\2\1\52\1\53\1\54"+
    "\1\55\14\2\1\56\1\2\1\57\3\2\1\60\3\2"+
    "\1\61\3\2\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b"+
    "\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763"+
    "\0\u07a0\0\u07dd\0\u081a\0\75\0\u0857\0\u0894\0\u08d1\0\75"+
    "\0\75\0\75\0\75\0\u090e\0\u094b\0\75\0\u0988\0\u09c5"+
    "\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad"+
    "\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95"+
    "\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d"+
    "\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165"+
    "\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d"+
    "\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\75"+
    "\0\75\0\u1535\0\75\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666"+
    "\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\u1905\0\172\0\u1942\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\172\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c"+
    "\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74"+
    "\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\172\0\u211f"+
    "\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307"+
    "\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef"+
    "\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7"+
    "\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\172"+
    "\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a"+
    "\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52"+
    "\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a"+
    "\0\u2e77\0\u2eb4\0\u2ef1\0\172\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5"+
    "\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd"+
    "\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5"+
    "\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u359d"+
    "\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785"+
    "\0\u37c2\0\u37ff\0\172\0\u383c\0\u3879\0\u38b6\0\u38f3\0\u3930"+
    "\0\172\0\u396d\0\u39aa\0\u39e7\0\172\0\172\0\u3a24\0\u3a61"+
    "\0\u3a9e\0\172\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c"+
    "\0\u3c49\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4"+
    "\0\u3e31\0\u3e6e\0\u3eab\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc"+
    "\0\u4019\0\u4056\0\u4093\0\u40d0\0\u410d\0\u414a\0\u4187\0\u41c4"+
    "\0\u4201\0\u423e\0\u427b\0\u42b8\0\u42f5\0\u4332\0\u436f\0\u43ac"+
    "\0\u43e9\0\u4426\0\u4463\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594"+
    "\0\u45d1\0\u460e\0\u464b\0\u4688\0\u46c5\0\u4702\0\u473f\0\172"+
    "\0\u477c\0\u47b9\0\u47f6\0\u4833\0\u4870\0\u48ad\0\u48ea\0\u4927"+
    "\0\u4964\0\u49a1\0\172\0\u49de\0\172\0\u4a1b\0\u4a58\0\u4a95"+
    "\0\u4ad2\0\u4b0f\0\u4b4c\0\172\0\u4b89\0\172\0\u4bc6\0\u4c03"+
    "\0\u4c40\0\u4c7d\0\u4cba\0\u4cf7\0\u4d34\0\u4d71\0\u4dae\0\u4deb"+
    "\0\u4e28\0\u4e65\0\u4ea2\0\u4edf\0\u4f1c\0\u4f59\0\u4f96\0\u4fd3"+
    "\0\u5010\0\u504d\0\172\0\172\0\u508a\0\u50c7\0\u5104\0\u5141"+
    "\0\172\0\u517e\0\172\0\u51bb\0\u51f8\0\u5235\0\172\0\172"+
    "\0\u5272\0\172\0\u52af\0\u52ec\0\u5329\0\172\0\172\0\172"+
    "\0\172\0\u5366\0\u53a3\0\u53e0\0\u541d\0\u545a\0\u5497\0\u54d4"+
    "\0\u5511\0\u554e\0\u558b\0\u55c8\0\u5605\0\172\0\u5642\0\172"+
    "\0\u567f\0\u56bc\0\u56f9\0\172\0\u5736\0\u5773\0\u57b0\0\172"+
    "\0\u57ed\0\u582a\0\u5867\0\172\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\3\1\20\1\3\1\21\1\22\1\23\1\3\1\24"+
    "\1\25\1\26\1\27\1\30\1\3\1\31\1\32\1\3"+
    "\1\33\2\3\1\34\1\35\1\36\1\37\1\40\1\3"+
    "\1\41\1\42\1\3\1\43\1\44\1\45\6\3\1\46"+
    "\2\2\1\47\1\50\1\51\1\52\1\53\76\0\2\3"+
    "\4\0\46\3\1\0\7\3\1\54\11\0\1\4\63\0"+
    "\1\55\1\56\10\0\1\5\1\0\1\5\73\0\1\57"+
    "\71\0\1\60\5\0\46\60\1\0\7\60\11\0\2\3"+
    "\4\0\1\3\1\61\12\3\1\62\31\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\16\3\1\63\27\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\16\3\1\64\27\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\15\3\1\65"+
    "\10\3\1\66\1\3\1\67\6\3\1\70\5\3\1\71"+
    "\1\0\3\3\1\72\3\3\1\54\10\0\2\3\4\0"+
    "\1\3\1\73\1\74\43\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\11\3\1\75\2\3\1\76\31\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\11\3\1\77\2\3"+
    "\1\100\31\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\22\3\1\101\23\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\13\3\1\102\32\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\6\3\1\103\13\3\1\104\23\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\14\3\1\105\31\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\1\3\1\106"+
    "\12\3\1\107\31\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\1\3\1\110\12\3\1\111\31\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\11\3\1\112\34\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\11\3\1\113\2\3"+
    "\1\114\31\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\24\3\1\115\21\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\4\3\1\116\7\3\1\117\31\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\4\3\1\120\41\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\11\3\1\121\34\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\1\3\1\122"+
    "\44\3\1\0\7\3\1\54\10\0\2\3\4\0\11\3"+
    "\1\123\34\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\10\3\1\124\35\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\14\3\1\125\31\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\1\3\1\126\2\3\1\127\12\3\1\130"+
    "\26\3\1\0\7\3\1\54\10\0\2\3\4\0\10\3"+
    "\1\131\35\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\1\3\1\132\44\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\4\3\1\133\7\3\1\134\31\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\4\3\1\135\41\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\11\3\1\136\34\3"+
    "\1\0\7\3\1\54\11\0\1\137\65\0\1\140\71\0"+
    "\1\141\10\0\1\142\5\0\46\142\1\0\7\142\12\0"+
    "\1\55\63\0\1\55\6\0\5\57\1\0\67\57\1\0"+
    "\2\60\3\0\1\143\46\60\1\0\7\60\11\0\2\3"+
    "\4\0\2\3\1\144\43\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\22\3\1\145\23\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\11\3\1\146\34\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\4\3\1\147\41\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\4\3\1\150\41\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\3\3\1\151"+
    "\42\3\1\0\7\3\1\54\10\0\2\3\4\0\10\3"+
    "\1\152\35\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\4\3\1\153\41\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\4\3\1\154\41\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\10\3\1\155\35\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\6\3\1\156\37\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\10\3\1\157\35\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\15\3\1\160\30\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\34\3\1\161"+
    "\11\3\1\0\7\3\1\54\10\0\2\3\4\0\4\3"+
    "\1\162\41\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\3\3\1\163\42\3\1\0\1\164\6\3\1\54\10\0"+
    "\2\3\4\0\4\3\1\165\41\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\14\3\1\166\31\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\26\3\1\167\17\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\37\3\1\170\6\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\16\3\1\171"+
    "\27\3\1\0\7\3\1\54\10\0\2\3\4\0\46\3"+
    "\1\0\3\3\1\172\3\3\1\54\10\0\2\3\4\0"+
    "\3\3\1\173\42\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\16\3\1\174\27\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\16\3\1\175\27\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\22\3\1\176\23\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\42\3\1\177\3\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\3\3\1\200\42\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\25\3\1\201"+
    "\20\3\1\0\7\3\1\54\10\0\2\3\4\0\30\3"+
    "\1\156\15\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\16\3\1\202\27\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\16\3\1\203\26\3\1\204\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\4\3\1\201\41\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\17\3\1\205\26\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\16\3\1\206\27\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\7\3\1\207"+
    "\36\3\1\0\7\3\1\54\10\0\2\3\4\0\14\3"+
    "\1\210\31\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\22\3\1\211\23\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\3\3\1\212\42\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\4\3\1\213\41\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\41\3\1\214\4\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\16\3\1\215\27\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\45\3\1\216\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\44\3\1\217\1\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\11\3\1\220"+
    "\34\3\1\0\7\3\1\54\10\0\2\3\4\0\6\3"+
    "\1\221\37\3\1\0\7\3\1\54\11\0\1\137\73\0"+
    "\2\142\4\0\46\142\1\0\7\142\11\0\2\3\4\0"+
    "\1\3\1\222\44\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\17\3\1\121\26\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\14\3\1\223\31\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\30\3\1\224\15\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\6\3\1\225\37\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\11\3\1\226\34\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\17\3\1\227"+
    "\26\3\1\0\7\3\1\54\10\0\2\3\4\0\34\3"+
    "\1\230\11\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\16\3\1\231\27\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\22\3\1\232\23\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\7\3\1\121\36\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\6\3\1\233\37\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\14\3\1\234\31\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\16\3\1\172\27\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\34\3\1\235"+
    "\11\3\1\0\7\3\1\54\10\0\2\3\4\0\14\3"+
    "\1\236\31\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\16\3\1\237\27\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\15\3\1\240\30\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\14\3\1\241\31\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\4\3\1\242\7\3\1\243\31\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\7\3\1\244"+
    "\36\3\1\0\7\3\1\54\10\0\2\3\4\0\1\3"+
    "\1\227\44\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\16\3\1\245\27\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\7\3\1\201\36\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\16\3\1\246\27\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\22\3\1\247\23\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\16\3\1\250\27\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\46\3\1\0\1\3"+
    "\1\251\5\3\1\54\10\0\2\3\4\0\26\3\1\252"+
    "\17\3\1\0\7\3\1\54\10\0\2\3\4\0\16\3"+
    "\1\253\15\3\1\254\11\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\41\3\1\255\4\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\15\3\1\256\14\3\1\257\13\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\4\3\1\260"+
    "\41\3\1\0\7\3\1\54\10\0\2\3\4\0\11\3"+
    "\1\201\34\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\37\3\1\201\6\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\11\3\1\261\34\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\16\3\1\262\27\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\3\3\1\263\42\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\4\3\1\264\41\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\22\3\1\265\23\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\41\3\1\266"+
    "\4\3\1\0\7\3\1\54\10\0\2\3\4\0\10\3"+
    "\1\267\35\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\6\3\1\270\37\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\46\3\1\0\4\3\1\271\2\3\1\54\10\0"+
    "\2\3\4\0\3\3\1\121\42\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\6\3\1\272\37\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\4\3\1\273\41\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\30\3\1\274\15\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\15\3\1\275"+
    "\30\3\1\0\7\3\1\54\10\0\2\3\4\0\4\3"+
    "\1\276\41\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\11\3\1\277\34\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\3\3\1\300\42\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\7\3\1\301\36\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\17\3\1\302\26\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\6\3\1\303\37\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\6\3\1\304\37\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\40\3\1\305"+
    "\5\3\1\0\7\3\1\54\10\0\2\3\4\0\16\3"+
    "\1\306\27\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\6\3\1\307\37\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\26\3\1\310\17\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\16\3\1\311\27\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\14\3\1\227\31\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\1\3\1\312\44\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\4\3\1\313\41\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\4\3\1\314"+
    "\41\3\1\0\7\3\1\54\10\0\2\3\4\0\1\3"+
    "\1\315\44\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\22\3\1\316\23\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\14\3\1\317\31\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\11\3\1\320\34\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\4\3\1\321\41\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\11\3\1\322\34\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\1\3\1\201\44\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\22\3\1\323"+
    "\23\3\1\0\7\3\1\54\10\0\2\3\4\0\16\3"+
    "\1\324\27\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\26\3\1\325\17\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\1\3\1\326\44\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\14\3\1\327\31\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\16\3\1\330\27\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\26\3\1\331\17\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\1\3\1\332\44\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\22\3\1\201"+
    "\23\3\1\0\7\3\1\54\10\0\2\3\4\0\14\3"+
    "\1\333\31\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\3\3\1\334\42\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\16\3\1\335\27\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\4\3\1\336\41\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\4\3\1\337\41\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\16\3\1\340\27\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\17\3\1\341\26\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\4\3\1\342"+
    "\41\3\1\0\7\3\1\54\10\0\2\3\4\0\4\3"+
    "\1\207\41\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\23\3\1\343\22\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\1\3\1\344\44\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\14\3\1\345\31\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\14\3\1\346\31\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\1\3\1\347\44\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\7\3\1\350\36\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\11\3\1\351"+
    "\34\3\1\0\7\3\1\54\10\0\2\3\4\0\4\3"+
    "\1\352\41\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\26\3\1\353\17\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\16\3\1\207\27\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\6\3\1\201\37\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\44\3\1\354\1\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\37\3\1\355\6\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\7\3\1\356\36\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\3\3\1\357"+
    "\42\3\1\0\7\3\1\54\10\0\2\3\4\0\16\3"+
    "\1\360\27\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\4\3\1\361\41\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\33\3\1\362\12\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\11\3\1\363\34\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\6\3\1\364\37\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\4\3\1\365\41\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\10\3\1\201\35\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\13\3\1\366"+
    "\32\3\1\0\7\3\1\54\10\0\2\3\4\0\16\3"+
    "\1\367\27\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\26\3\1\370\17\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\4\3\1\371\41\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\46\3\1\0\4\3\1\372\2\3\1\54"+
    "\10\0\2\3\4\0\16\3\1\373\27\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\16\3\1\374\27\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\24\3\1\375\21\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\17\3\1\172"+
    "\26\3\1\0\7\3\1\54\10\0\2\3\4\0\16\3"+
    "\1\376\27\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\4\3\1\377\41\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\22\3\1\u0100\23\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\16\3\1\u0101\27\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\6\3\1\u0102\37\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\17\3\1\u0103\26\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\14\3\1\u0104\31\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\1\3\1\u0105"+
    "\44\3\1\0\7\3\1\54\10\0\2\3\4\0\16\3"+
    "\1\u0106\27\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\14\3\1\u0107\31\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\11\3\1\u0108\34\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\4\3\1\u0109\41\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\14\3\1\267\31\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\1\3\1\u010a\44\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\23\3\1\u010b\22\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\16\3\1\u010c"+
    "\27\3\1\0\7\3\1\54\10\0\2\3\4\0\4\3"+
    "\1\u010d\41\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\1\3\1\u010e\44\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\24\3\1\u010f\21\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\7\3\1\172\36\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\14\3\1\201\31\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\34\3\1\u0110\11\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\1\3\1\u0111\44\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\26\3\1\u0112"+
    "\17\3\1\0\7\3\1\54\10\0\2\3\4\0\10\3"+
    "\1\u0113\35\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\23\3\1\u0114\22\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\1\3\1\u0115\44\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\31\3\1\u0116\6\3\1\u0117\5\3\1\0"+
    "\5\3\1\u0118\1\3\1\54\10\0\2\3\4\0\3\3"+
    "\1\u0119\42\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\3\3\1\u011a\42\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\22\3\1\u011b\23\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\14\3\1\u011c\31\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\16\3\1\u011d\27\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\7\3\1\u011e\36\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\45\3\1\u011f\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\26\3\1\u0120\17\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\4\3\1\u0121"+
    "\41\3\1\0\7\3\1\54\10\0\2\3\4\0\12\3"+
    "\1\u0122\6\3\1\u0123\24\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\34\3\1\u0124\11\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\6\3\1\u0125\37\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\1\3\1\u0126\44\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\13\3\1\u0127\32\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\16\3\1\u0128"+
    "\27\3\1\0\7\3\1\54\10\0\2\3\4\0\11\3"+
    "\1\u0129\34\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\3\3\1\u012a\42\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\1\3\1\u012b\44\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\3\3\1\u012c\42\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\14\3\1\u012d\31\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\1\3\1\u012e\44\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\16\3\1\u012f\27\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\14\3\1\u0130"+
    "\31\3\1\0\7\3\1\54\10\0\2\3\4\0\11\3"+
    "\1\u0131\34\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\1\3\1\u0132\44\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\3\3\1\201\42\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\24\3\1\u0133\16\3\1\u0134\2\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\14\3\1\u0135\31\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\11\3\1\u0136"+
    "\34\3\1\0\7\3\1\54\10\0\2\3\4\0\11\3"+
    "\1\u0137\34\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\3\3\1\u0138\42\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\1\3\1\u0139\44\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\1\3\1\u013a\44\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\14\3\1\314\31\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\46\3\1\0\2\3\1\u013b"+
    "\4\3\1\54\10\0\2\3\4\0\15\3\1\u013c\30\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\11\3\1\u013d"+
    "\34\3\1\0\7\3\1\54\10\0\2\3\4\0\16\3"+
    "\1\u013e\27\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\1\3\1\u013f\44\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\4\3\1\u0140\41\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\26\3\1\u0141\17\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\1\3\1\u0142\44\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\17\3\1\u0143\26\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\6\3\1\u0144\37\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\11\3\1\u0145"+
    "\34\3\1\0\7\3\1\54\10\0\2\3\4\0\16\3"+
    "\1\u0146\27\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\26\3\1\u0147\17\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\16\3\1\u0148\27\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\1\3\1\u0149\44\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\10\3\1\u014a\35\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\16\3\1\u014b\27\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\7\3\1\u014c\36\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\1\3\1\u014d"+
    "\44\3\1\0\7\3\1\54\10\0\2\3\4\0\14\3"+
    "\1\u014e\31\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\17\3\1\u014f\26\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\45\3\1\u0150\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\6\3\1\u0151\37\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\11\3\1\u0152\34\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\6\3\1\207\37\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\11\3\1\u0153\34\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\6\3\1\u0154\37\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\11\3\1\u0155"+
    "\34\3\1\0\7\3\1\54\10\0\2\3\4\0\16\3"+
    "\1\u0156\27\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\1\3\1\u0157\44\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\11\3\1\u0158\34\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\14\3\1\u0159\31\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\11\3\1\u015a\34\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\4\3\1\u015b\41\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\42\3\1\u015c\3\3"+
    "\1\0\6\3\1\u015d\1\54\10\0\2\3\4\0\3\3"+
    "\1\u015e\42\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\26\3\1\u015f\17\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\4\3\1\u0160\41\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\16\3\1\u0161\27\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\1\3\1\u0162\44\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\41\3\1\u0163\4\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\11\3\1\u0164\34\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\45\3\1\u0165"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\7\3\1\u0166"+
    "\36\3\1\0\7\3\1\54\10\0\2\3\4\0\6\3"+
    "\1\u0167\37\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\26\3\1\u0168\17\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\7\3\1\u0169\36\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\6\3\1\u016a\37\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\4\3\1\u016b\41\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\16\3\1\u016c\27\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\16\3\1\u016d\27\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\11\3\1\u016e"+
    "\34\3\1\0\7\3\1\54\10\0\2\3\4\0\1\3"+
    "\1\u016f\44\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\14\3\1\u0170\31\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\7\3\1\u0171\36\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\11\3\1\u0172\34\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\16\3\1\u0173\27\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\16\3\1\u0174\27\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\26\3\1\u0175\17\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\11\3\1\u0176"+
    "\34\3\1\0\7\3\1\54\10\0\2\3\4\0\1\3"+
    "\1\u0177\44\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\4\3\1\u0178\41\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\11\3\1\u0179\34\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\1\3\1\u017a\44\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\3\3\1\u017b\42\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\1\3\1\u017c\44\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\22\3\1\u017d\23\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\16\3\1\u017e"+
    "\27\3\1\0\7\3\1\54\10\0\2\3\4\0\22\3"+
    "\1\u017f\23\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\4\3\1\u0180\41\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\14\3\1\u0181\31\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\11\3\1\u0182\34\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\14\3\1\u0183\31\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\7\3\1\u0184\36\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\4\3\1\u0185\41\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\44\3\1\u0186"+
    "\1\3\1\0\7\3\1\54\10\0\2\3\4\0\3\3"+
    "\1\u0187\42\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\4\3\1\u0188\41\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\6\3\1\u0189\37\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\4\3\1\u018a\41\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\26\3\1\u018b\17\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\11\3\1\u018c\34\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\4\3\1\u018d\41\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\17\3\1\u018e"+
    "\26\3\1\0\7\3\1\54\10\0\2\3\4\0\3\3"+
    "\1\u018f\42\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\7\3\1\u0190\36\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\11\3\1\u0191\34\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\45\3\1\u0192\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\6\3\1\u0193\37\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\1\3\1\u0194\44\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\1\3\1\u0195\44\3\1\0"+
    "\7\3\1\54\10\0\2\3\4\0\11\3\1\u0196\34\3"+
    "\1\0\7\3\1\54\10\0\2\3\4\0\26\3\1\u0197"+
    "\17\3\1\0\7\3\1\54\10\0\2\3\4\0\6\3"+
    "\1\u0198\37\3\1\0\7\3\1\54\10\0\2\3\4\0"+
    "\7\3\1\u0199\36\3\1\0\7\3\1\54\10\0\2\3"+
    "\4\0\11\3\1\u019a\34\3\1\0\7\3\1\54\10\0"+
    "\2\3\4\0\4\3\1\u019b\41\3\1\0\7\3\1\54"+
    "\10\0\2\3\4\0\4\3\1\u019c\41\3\1\0\7\3"+
    "\1\54\10\0\2\3\4\0\7\3\1\u019d\36\3\1\0"+
    "\7\3\1\54\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22692];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\41\1\1\11\3\1\4\11\1\0\1\1"+
    "\1\11\1\1\1\0\57\1\2\11\1\1\1\11\u013a\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { return new Symbol(sym.USAR_SENSOR_PROXIMIDAD, yychar, yyline, yytext());
          }
        case 52: break;
        case 30: 
          { return new Symbol(sym.TRAZAR_RUTA, yychar, yyline, yytext());
          }
        case 53: break;
        case 15: 
          { /* Ignore single-line comments */
          }
        case 54: break;
        case 22: 
          { return new Symbol(sym.COLOR, yychar, yyline, yytext());
          }
        case 55: break;
        case 16: 
          { return new Symbol(sym.D_PG2, yychar, yyline, yytext());
          }
        case 56: break;
        case 23: 
          { return new Symbol(sym.MAIN, yychar, yyline, yytext());
          }
        case 57: break;
        case 41: 
          { return new Symbol(sym.AJUSTAR_SONIDO, yychar, yyline, yytext());
          }
        case 58: break;
        case 39: 
          { return new Symbol(sym.FIN_RECORRIDO, yychar, yyline, yytext());
          }
        case 59: break;
        case 38: 
          { return new Symbol(sym.CAMBIAR_COLOR, yychar, yyline, yytext());
          }
        case 60: break;
        case 24: 
          { return new Symbol(sym.GIRAR, yychar, yyline, yytext());
          }
        case 61: break;
        case 6: 
          { return new Symbol(sym.MAYOR, yychar, yyline, yytext());
          }
        case 62: break;
        case 7: 
          { return new Symbol(sym.GUION, yychar, yyline, yytext());
          }
        case 63: break;
        case 9: 
          { return new Symbol(sym.PARENTESIS_ABIERTO, yychar, yyline, yytext());
          }
        case 64: break;
        case 2: 
          { return new Symbol(sym.NAME, yychar, yyline, yytext());
          }
        case 65: break;
        case 18: 
          { return new Symbol(sym.PLACA, yychar, yyline, yytext());
          }
        case 66: break;
        case 27: 
          { return new Symbol(sym.ESPACIO, yychar, yyline, yytext());
          }
        case 67: break;
        case 50: 
          { return new Symbol(sym.USAR_SENSOR_DISTANCIA, yychar, yyline, yytext());
          }
        case 68: break;
        case 47: 
          { return new Symbol(sym.AJUSTAR_VELOCIDAD, yychar, yyline, yytext());
          }
        case 69: break;
        case 46: 
          { return new Symbol(sym.POSICION_INICIAL, yychar, yyline, yytext());
          }
        case 70: break;
        case 10: 
          { return new Symbol(sym.PARENTESIS_CERRADO, yychar, yyline, yytext());
          }
        case 71: break;
        case 48: 
          { return new Symbol(sym.PATRON_MOVIMIENTO, yychar, yyline, yytext());
          }
        case 72: break;
        case 13: 
          { return new Symbol(sym.N_DECIMAL, yychar, yyline, yytext());
          }
        case 73: break;
        case 12: 
          { return new Symbol(sym.COMA, yychar, yyline, yytext());
          }
        case 74: break;
        case 14: 
          { return new Symbol(sym.NUMERO_G, yychar, yyline, yytext());
          }
        case 75: break;
        case 4: 
          { /* Ignore whitespace */
          }
        case 76: break;
        case 29: 
          { return new Symbol(sym.CARRO, yychar, yyline, yytext());
          }
        case 77: break;
        case 17: 
          { return new Symbol(sym.D_PG1, yychar, yyline, yytext());
          }
        case 78: break;
        case 35: 
          { return new Symbol(sym.NIVEL_BATERIA, yychar, yyline, yytext());
          }
        case 79: break;
        case 40: 
          { return new Symbol(sym.ACTIVAR_BOCINA, yychar, yyline, yytext());
          }
        case 80: break;
        case 36: 
          { return new Symbol(sym.DIAGNOSTICAR, yychar, yyline, yytext());
          }
        case 81: break;
        case 25: 
          { return new Symbol(sym.AVANZAR, yychar, yyline, yytext());
          }
        case 82: break;
        case 3: 
          { return new Symbol(sym.NUMERO, yychar, yyline, yytext());
          }
        case 83: break;
        case 11: 
          { return new Symbol(sym.P_COMA, yychar, yyline, yytext());
          }
        case 84: break;
        case 34: 
          { return new Symbol(sym.APAGAR_MOTOR, yychar, yyline, yytext());
          }
        case 85: break;
        case 45: 
          { return new Symbol(sym.CAMBIAR_NOMBRE, yychar, yyline, yytext());
          }
        case 86: break;
        case 44: 
          { return new Symbol(sym.CARGAR_BATERIA, yychar, yyline, yytext());
          }
        case 87: break;
        case 42: 
          { return new Symbol(sym.ENCENDER_MOTOR, yychar, yyline, yytext());
          }
        case 88: break;
        case 19: 
          { return new Symbol(sym.IDENTIFICADOR, yychar, yyline, yytext());
          }
        case 89: break;
        case 37: 
          { return new Symbol(sym.SI_PROXIMIDAD, yychar, yyline, yytext());
          }
        case 90: break;
        case 20: 
          { return new Symbol(sym.DEF, yychar, yyline, yytext());
          }
        case 91: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 92: break;
        case 31: 
          { return new Symbol(sym.RETROCEDER, yychar, yyline, yytext());
          }
        case 93: break;
        case 21: 
          { return new Symbol(sym.MARCA, yychar, yyline, yytext());
          }
        case 94: break;
        case 26: 
          { return new Symbol(sym.DETENER, yychar, yyline, yytext());
          }
        case 95: break;
        case 49: 
          { return new Symbol(sym.AJUSTAR_ORIENTACION, yychar, yyline, yytext());
          }
        case 96: break;
        case 8: 
          { return new Symbol(sym.D_PUNTOS, yychar, yyline, yytext());
          }
        case 97: break;
        case 33: 
          { return new Symbol(sym.ORIENTACION, yychar, yyline, yytext());
          }
        case 98: break;
        case 28: 
          { return new Symbol(sym.ESPERAR, yychar, yyline, yytext());
          }
        case 99: break;
        case 32: 
          { return new Symbol(sym.SET_ESPACIO, yychar, yyline, yytext());
          }
        case 100: break;
        case 43: 
          { return new Symbol(sym.ENCENDER_LUCES, yychar, yyline, yytext());
          }
        case 101: break;
        case 5: 
          { return new Symbol(sym.COMILLA, yychar, yyline, yytext());
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
